/*
 * gui_2.0.c
 *
 *  Created on: 09/mag/2018
 *      Author: emilio
 */

#include "terasic_includes.h"
#include "gui.h"
#include "alt_video_display.h"
#include "simple_graphics.h"
#include "geometry.h"
#include "touch_spi.h"


#define DOT_SIZE    5


void GUI_ShowInfo(alt_video_display *pDisplay, char *pText);
void GUI_ShowWelcome(alt_video_display *pDisplay);
void GUI_ShowTouchPoint(alt_video_display *pDisplay, int X1, int Y1, int color);


typedef enum{
    BTN_CLEAR = 0,
    BTN_ENTER,		//1
    BTN_RESULT,		//2
    BTN_NUM,		//3

    BTN_NONE
}BUTTON_ID;


typedef struct{
    RECT rcPaint;						//rettangolo in cui si scrive
    RECT clear;
    RECT enter;
    RECT expression;					//rettangolo in cui compare l'espressione da risolvere
    RECT result;						//rettangolo contenente il risultato
}DESK_INFO;


void GUI_ShowWelcome(alt_video_display *pDisplay){
	int x, y;

	x = pDisplay->width / 2 - 60;
	y = pDisplay->height / 2 - 10;

	vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Math Training");

}

void GUI_DeskInit(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
    RECT rc;
    /*dimensioni pulsanti*/
    const int BoxH = 40;
    const int BoxW = 100;
    const int BoxW_quiz = 140;

    const int GapH = 5;
    const int DrawBorder = 8;

    int GapW;						//gap tra i pulsanti

    GapW = (pDisplay->width - ClearExtraW - (2*BoxW))/(3);
    //printf("GapW=%d\r\n", GapW);

    //confini pulsante in basso a sinistra (i pixel si contano dall'alto verso il basso e da sx a dx)
    rc.top = pDisplay->height - BoxH - GapH;
    rc.bottom = rc.top + BoxH;
    rc.left = DrawBorder;
    rc.right = rc.left + BoxW;

    RectSet(&pDeskInfo->clear, DrawBorder, DrawBorder+BoxW, pDisplay->height-BoxH-GapH, pDisplay->height-GapH);

    RectSet(&pDeskInfo->enter, DrawBorder+BoxW+24, DrawBorder+2*BoxW+24, pDisplay->height-BoxH-GapH, pDisplay->height-GapH);

    RectSet(&pDeskInfo->expression, DrawBorder, DrawBorder+BoxW_quiz, GapH, GapH+BoxH);

    RectSet(&pDeskInfo->result, 2*DrawBorder+BoxW_quiz, DrawBorder+GapW+BoxW_quiz+80, GapH, GapH+BoxH);

    // desk drawing area
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, BoxH+DrawBorder, pDisplay->height-DrawBorder-BoxH);

}

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    int ButtonId = BTN_NONE;

	if (IsPtInRect(pt, &pDeskInfo->clear))
		ButtonId = BTN_CLEAR;
	else if (IsPtInRect(pt, &pDeskInfo->enter))
		ButtonId = BTN_ENTER;
	else if (IsPtInRect(pt, &pDeskInfo->result))
		ButtonId = BTN_RESULT;

    return ButtonId;
}

void GUI_DeskDraw(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
    RECT rc;

    // draw border (bordo bianco che delimita l'area di scrittura)
    RectCopy(&rc, &pDeskInfo->rcPaint);
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);


	//disegno il pulsante di clear
	RectCopy(&rc, &(pDeskInfo->clear));
	vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, RED_24, DO_FILL, pDisplay);
	vid_print_string_alpha(rc.left+8, rc.top+(RectHeight(&rc)-22)/2, WHITE_24, BLACK_24, tahomabold_20, pDisplay, "Clear");

	//disegno il pulsante di enter
	RectCopy(&rc, &(pDeskInfo->enter));
	vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, GREEN, DO_FILL, pDisplay);
	vid_print_string_alpha(rc.left+8, rc.top+(RectHeight(&rc)-22)/2, WHITE_24, BLACK_24, tahomabold_20, pDisplay, "Enter");

	//disegno il campo expression
	RectCopy(&rc, &(pDeskInfo->expression));
	vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_FILL, pDisplay);

	//disegno il campo result
	RectCopy(&rc, &(pDeskInfo->result));
	vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_FILL, pDisplay);

}


bool IsContinuedPoint(POINT *ptPre, POINT *ptNew){
    bool bYes = TRUE;
    const int nMax = 50;
    if (abs(ptPre->x - ptNew->x) > nMax)
        bYes = FALSE;
    else if (abs(ptPre->y - ptNew->y) > nMax)
        bYes = FALSE;

    return bYes;
}


void GUI_ClearPaintArea(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
    RECT rc;
    RectCopy(&rc, &pDeskInfo->rcPaint);
    RectInflate(&rc, -1, -1);
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
}


void GUI(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
    // video
    DESK_INFO DeskInfo;
    int X, Y;
    POINT Pt;
    const int nDotSize = DOT_SIZE;
    RECT rcTouch;
    int ColorPen, ButtonId;

    uint16_t img[SCREEN_WIDTH*SCREEN_WIDTH];
    //extern uint8_t img_ready;

    // Schermata iniziale
	GUI_ShowWelcome(pDisplay);
	usleep(1*1000*1000);
	vid_clean_screen(pDisplay, BLACK_24);

    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);

    GUI_DeskInit(pDisplay, &DeskInfo);		//imposta i vari rettangoli
    GUI_DeskDraw(pDisplay, &DeskInfo);		//colora e riempie tutto


    RectCopy(&rcTouch, &DeskInfo.rcPaint);
    RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);

    ColorPen = WHITE_24;

   // PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);

    while(1){
		// touch
		if (Touch_GetXY(pTouch, &X, &Y)){

			printf("x=%d, y=%d\r\n", X,Y);
			PtSet(&Pt, X, Y);

			/*se c'è tocco nell'area buona, coloro il punto toccato*/
			if ( IsPtInRect(&Pt, &rcTouch)){
				vid_draw_circle(Pt.x, Pt.y, nDotSize, ColorPen, DO_FILL, pDisplay);
				/*update_img(Pt.x, Pt.y, &img);*/
			}
			/*se ho cliccato clear, pulisco*/
			else if (GUI_CheckButton(&DeskInfo, &Pt) == BTN_CLEAR){
				GUI_ClearPaintArea(pDisplay, &DeskInfo);
				Touch_EmptyFifo(pTouch);
			}
			/*se do conferma, avvio la rete neurale*/
			else if (GUI_CheckButton(&DeskInfo, &Pt) == BTN_ENTER){
				//LCD_GetImage(&DeskInfo &img, pDisplay);
				//resize_image(&img, &mnist_img);
				//img_ready = 1;
			}

			ButtonId = GUI_CheckButton(&DeskInfo, &Pt);

		} // if touch
    } // while

}



void GUI_ShowInfo(alt_video_display *pDisplay, char *pText){
    static int x=0,y=100;
   // vid_clean_screen(pReader, BLACK_24);
    vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, pText);
}

void GUI_ShowTouchPoint(alt_video_display *pDisplay, int X, int Y, int color){
    vid_draw_circle(X, Y, 10, color, DO_FILL, pDisplay);
}


